package com.example.demo;import com.alibaba.fastjson.JSON;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.*;import java.util.stream.Collectors;class People {    private String name;    private int age;    private String address;    /**     * 0-女；1-男     */    private int sex;    public People(String name, int age, String address, int sex) {        this.name = name;        this.age = age;        this.address = address;        this.sex = sex;    }    public People() {    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    public String getAddress() {        return address;    }    public void setAddress(String address) {        this.address = address;    }    public int getSex() {        return sex;    }    public void setSex(int sex) {        this.sex = sex;    }}public class Demo {    private static final int MAX = 50;    private static final int MOD_15 = 15;    private static final int MOD_2 = 2;    private static final int ONE = 1;    private static final int AGE_BASE = 18;    private static final String NAME_PRE = "Dugu_";    private static final String ADDRESS_PRE = "长安路-";    private static final String ADDRESS_SUF = "号";    private static final Logger logger = LoggerFactory.getLogger(Demo.class);    public static void main(String[] args) {        List<People> data = new ArrayList<>();        People people = null;        for (int i = 0; i < MAX; i++) {            people = new People(new StringBuilder(NAME_PRE).append(i).toString(), AGE_BASE + i % MOD_15, new StringBuilder(ADDRESS_PRE).append(i + ONE).append(ADDRESS_SUF).toString(), i % MOD_2);            data.add(people);        }        logger.info("data===>{}", JSON.toJSONString(data));        Map<String, Object> where = new HashMap<>();        where.put("lessThan", 25);        where.put("grtThan", 30);        where.put("nameNotContains5", "5");        // 查询年龄小于25或者大于30且名字中不包含“5”        // 按年eversed反序排        // 个数20        List<People> list = query(data, where, 20);        logger.info("clist===>{}", JSON.toJSONString(list));    }    /**     *     * @param data     * @param where     * @param limit     * @return     */    static List<People> query(List<People> data, Map<String, Object> where, int limit) {        // java8的stram是支持多个字段的排序的        Map<Integer, List<People>> collect = data.stream().filter(da -> (da.getAge() < (int) where.get("lessThan") || da.getAge() > (int) where.get("grtThan")) && !da.getName().contains(where.get("nameNotContains5").toString()))                .sorted(Comparator.comparing(People::getAge).thenComparing(People::getAddress).reversed())                .limit(limit)                .collect(Collectors.groupingBy(People::getSex));        logger.info("collect===>{}", JSON.toJSONString(collect));        // 男        List<People> peopleList = collect.get(ONE);        return peopleList;    }}